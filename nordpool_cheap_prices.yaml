blueprint:
  name: Nordpool cheap hours
  description: This blueprint uses the nordpool integration and lets you choose
    how many hours you will define as cheap, and make automations
    based on that information.
    Auto-scales to quarter-hours when present with Nordpool hourly (24) and 15-minute (96) prices.
  domain: automation
  source_url: https://github.com/kullarkert/ha_nordpool_hours_blueprint/blob/main/nordpool_cheap_prices.yaml
  author: kullarkert
  input:
    grid_area:
      name: Grid area sensor
      description: This is your grid area sensor
      selector:
        entity:
          domain:
            - sensor
          integration: nordpool
          multiple: false
    cheap_hours:
      name: Cheap hours
      description: Number of cheap hours
      default: 5
      selector:
        number:
          min: 0
          max: 24
          mode: slider
          step: 1
          unit_of_measurement: "h"
    start_time:
      name: Start time
      description: First time of the day to consider prices
      default: "00:00:00"
      selector:
        time: {}
    end_time:
      name: End time
      description: Last time of the day to consider prices
      default: "23:59:59"
      selector:
        time: {}
    day_monday:
      name: Run on Monday
      description: Run the action on Monday
      default: true
      selector:
        boolean:
    day_tuesday:
      name: Run on Tuesday
      description: Run the action on Tuesday
      default: true
      selector:
        boolean:
    day_wednesday:
      name: Run on Wednesday
      description: Run the action on Wednesday
      default: true
      selector:
        boolean:
    day_thursday:
      name: Run on Thursday
      description: Run the action on Thursday
      default: true
      selector:
        boolean:
    day_friday:
      name: Run on Friday
      description: Run the action on Friday
      default: true
      selector:
        boolean:
    day_saturday:
      name: Run on Saturday
      description: Run the action on Saturday
      default: true
      selector:
        boolean:
    day_sunday:
      name: Run on Sunday
      description: Run the action on Sunday
      default: true
      selector:
        boolean:
    expensive:
      name: Expensive
      description: Action to run on expensive hours
      default: []
      selector:
        action: {}
    cheap:
      name: Cheap
      description: Action to run on cheap hours
      default: []
      selector:
        action: {}
variables:
  grid_area_var: !input grid_area
  cheap_hours_var: !input cheap_hours
  start_time: !input start_time
  end_time: !input end_time
  day_monday: !input day_monday
  day_tuesday: !input day_tuesday
  day_wednesday: !input day_wednesday
  day_thursday: !input day_thursday
  day_friday: !input day_friday
  day_saturday: !input day_saturday
  day_sunday: !input day_sunday

  #Custom variables that are computed

  start_hour: >-
    {{ start_time.split(':')[0] | int(0) }}
  start_minute: >-
    {{ start_time.split(':')[1] | int(0) }}
  end_hour: >-
    {{ end_time.split(':')[0] | int(23) }}
  end_minute: >-
    {{ end_time.split(':')[1] | int(59) }}
  in_time_window: >-
    {%- set now_mins = now().hour * 60 + now().minute -%}
    {%- set start_mins = start_hour * 60 + start_minute -%}
    {%- set end_mins = end_hour * 60 + end_minute -%}
    {{ start_mins <= now_mins and now_mins <= end_mins }}
  today: >-
    {{ now().weekday() | int(0) }}
  days: >-
    {{ [day_monday, day_tuesday, day_wednesday, day_thursday, day_friday, day_saturday, day_sunday] }}
  threshold: >-
    {%- set all_prices = (state_attr(grid_area_var,'today') | list) -%}
    {%- set count = all_prices | length -%}
    {%- if count == 0 -%}
      {{ 9999 }}
    {%- else -%}
      {%- set factor = 4 if count >= 96 else 1 -%}
      {%- if count >= 96 -%}
        {# 15-min slots #}
        {%- set start_idx = start_hour * 4 + (start_minute // 15) -%}
        {%- set end_idx = end_hour * 4 + (end_minute // 15) -%}
      {%- else -%}
        {# Hourly slots #}
        {%- set start_idx = start_hour -%}
        {%- set end_idx = end_hour -%}
      {%- endif -%}
      {%- set start_idx = [[start_idx, 0] | max, count - 1] | min -%}
      {%- set end_idx = [[end_idx, 0] | max, count - 1] | min -%}
      {%- set filtered_prices = all_prices[start_idx:end_idx + 1] -%}
      {%- set filtered_count = filtered_prices | length -%}
      {%- if filtered_count == 0 -%}
        {{ 9999 }}
      {%- else -%}
        {%- set raw_idx = (cheap_hours_var | int(0)) * factor -%}
        {%- set idx = [raw_idx, filtered_count - 1] | min -%}
        {{ (filtered_prices | map('float') | sort)[idx] }}
      {%- endif -%}
    {%- endif -%}
  # Computed variable for current 15-min or hourly price
  current_slot_price: >-
    {%- set raw = ((state_attr(grid_area_var,'raw_today') or []) + (state_attr(grid_area_var,'raw_tomorrow') or [])) -%}
    {%- set nowts = now() -%}
    {%- set cur = none -%}
    {%- for p in raw %}
      {%- set s = as_datetime(p.start) -%}
      {%- set e = as_datetime(p.end) -%}
      {%- if s <= nowts and nowts < e -%}
        {%- set cur = (p.value | default(p.price)) | float(9999) -%}
        {%- break -%}
      {%- endif -%}
    {%- endfor -%}
    {%- if cur is none -%}
      {%- set prices = (state_attr(grid_area_var,'today') | list) -%}
      {%- set count = prices | length -%}
      {%- if count >= 96 -%}
        {# 15-min: index = hour*4 + minute//15 #}
        {%- set idx = now().hour * 4 + (now().minute // 15) -%}
      {%- elif count == 24 -%}
        {# hourly fallback #}
        {%- set idx = now().hour -%}
      {%- else -%}
        {%- set idx = 0 -%}
      {%- endif -%}
      {%- set idx = [ [idx, 0] | max, (count - 1) ] | min -%}
      {%- set cur = prices[idx] | float(9999) -%}
    {%- endif -%}
    {{ cur }}
trigger:
  - platform: state
    entity_id: !input grid_area
  # Update every 15min
  - platform: time_pattern
    minutes: "/15"
action:
  - choose:
      - conditions:
          - condition: template
            value_template: >-
               {{ days[today] and in_time_window and current_slot_price <= threshold }}
        sequence: !input cheap
      - conditions:
          - condition: template
            value_template: >-
              {{ days[today] and in_time_window and current_slot_price > threshold }} 
        sequence: !input expensive
    default: []
